image: python:3.8-slim-buster

variables:
  DEBUG: 'True'
  DB_NAME: collection_editor
  DB_HOST: postgres
  DB_ENGINE: postgres
  DB_DATABASE: collection_editor
  DB_USER: ce_user
  DB_PASSWORD: ce_password
  MONGO_HOST: ce_mongo
  MONGO_DATABASE: collection_editor
  MONGO_USER: ce_user
  MONGO_PASSWORD: ce_password
  MONGO_PORT: 27017

before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends gcc git build-essential libsasl2-dev python3-dev libldap2-dev libssl-dev ldap-utils
  - pip install -U pip
  - pip install --ignore-installed -r requirements.txt

stages:
  - code checks
  - documentation
  - tests
  - sonarqube
  - build

Flake8:
  stage: code checks
  before_script:
    - echo "pass"  
  script:
    - pip install flake8
    - flake8 core/ collection_editor/

PyLint:
  stage: code checks
  allow_failure: true
  script:
    - pip install pylint pylint_django
    - pylint --rcfile ./.pylintrc collection_editor core

Piprot:
  stage: code checks
  allow_failure: true
  script:
    - pip install piprot
    - piprot

PipCheck:
  stage: code checks
  allow_failure: true
  script:
    - pip check

Safety:
  stage: code checks
  allow_failure: true
  script:
    - pip install safety
    - safety check -r requirements.txt

Sphinx documentation development:
  stage: documentation
  script:
    - pip install sphinx sphinx_rtd_theme sphinx-autodoc-typehints sphinxcontrib.httpdomain
    - cd docs/
    - make html
  artifacts:
    paths:
        - _build/html
    expire_in: 3 day
  only:
    - branches
  except:
    - master
  needs:
    - Flake8

Sphinx documentation:
  stage: documentation
  script:
    - pip install sphinx sphinx_rtd_theme sphinx-autodoc-typehints sphinxcontrib.httpdomain
    - cd docs/
    - make html
  artifacts:
    paths:
      - _build/html
    expire_in: 30 day
  only:
    - master
  needs:
    - Flake8

Test:
  stage: tests
  variables:
    POSTGRES_USER: ce_user
    POSTGRES_PASSWORD: ce_password
    POSTGRES_DB: collection_editor
    POSTGRES_HOST_AUTH_METHOD: trust
    MONGO_INITDB_DATABASE: collection_editor
    MONGO_INITDB_ROOT_USERNAME: ce_user
    MONGO_INITDB_ROOT_PASSWORD: ce_password
    TESTING: 'True'
  services:
    - name: postgres:12-alpine
      alias: postgres
    - name: mongo:4.2
      alias: ce_mongo
  script:
    - pip install -r testing_requirements.txt
    - cp example.env .env
    - python manage.py migrate
    - coverage run manage.py test
    - coverage xml -o cov.xml
    - coverage report -m
  coverage: /^TOTAL.*\s+(\d+\%)$/
  artifacts:
    paths:
        - cov.xml
    expire_in: 1h
  needs:
    - Flake8

sonarqube:
  image: sonarsource/sonar-scanner-cli
  stage: sonarqube
  before_script: []
  script:
    - sonar-scanner -Dsonar.projectKey=CollectionEditor -Dsonar.sources=. -Dsonar.host.url=https://sonarqube.whiteaster.com -Dsonar.login=3c1c5d7aec1288650be47427f18a5990e94024eb
  dependencies: 
    - Test
  only:
    - master
  needs:
    - Test

Build docker dev image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "pass"
  stage: build
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.prod --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_BRANCH --destination $CI_REGISTRY_IMAGE:development
  only:
    - development

Build docker master image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "pass"
  stage: build
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"gitlab-ci-token\",\"password\":\"$CI_JOB_TOKEN\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile.prod --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --destination $CI_REGISTRY_IMAGE:latest
  only:
    - master
